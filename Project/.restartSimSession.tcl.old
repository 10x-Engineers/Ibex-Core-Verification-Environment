# Begin_DVE_Session_Save_Info
# DVE restart session
# Saved on Wed May 25 19:55:43 2022
# Designs open: 1
#   Sim: /root/Downloads/part-i/simv
# Toplevel windows open: 2
# 	TopLevel.1
# 	TopLevel.2
#   Source.1: 
#   Source.2: uvm_pkg.\uvm_root::run_test 
#   Schematic.1: ok
#   Schematic.2: ok
#   Source.3: uvm_pkg
#   Wave.1: 30 signals
#   Group count = 6
#   Group data_mem_intf signal count = 10
#   Group instr_mem_intf signal count = 8
#   Group probe_if signal count = 8
#   Group data_mem_intf_1 signal count = 13
#   Group instr_mem_intf_1 signal count = 9
#   Group probe_if_1 signal count = 8
# End_DVE_Session_Save_Info

# DVE version: L-2016.06_Full64
# DVE build date: May 24 2016 21:01:02


#<Session mode="Restart" path=".restartSimSession.tcl" type="Debug">

gui_set_loading_session_type Restart
gui_continuetime_set
gui_clear_window -type Wave
gui_clear_window -type List

# Application preferences
gui_set_pref_value -key app_default_font -value {Fixed [Misc],9,-1,5,50,0,0,0,0,0}
gui_src_preferences -tabstop 8 -maxbits 24 -windownumber 1
#<WindowLayout>

# DVE top-level session


# Create and position top-level window: TopLevel.1

set TopLevel.1 TopLevel.1

# Docked window settings
set HSPane.1 HSPane.1
set Hier.1 Hier.1
set Stack.1 Stack.1
set Class.1 Class.1
set Object.1 Object.1
set DLPane.1 DLPane.1
set Data.1 Data.1
set Local.1 Local.1
set Member.1 Member.1
set Console.1 Console.1
gui_sync_global -id ${TopLevel.1} -option true

# MDI window settings
set Source.1 Source.1
gui_update_layout -id ${Source.1} {{show_state maximized} {dock_state undocked} {dock_on_new_line false}}
set Source.2 Source.2
gui_update_layout -id ${Source.2} {{show_state maximized} {dock_state undocked} {dock_on_new_line false}}
gui_use_schematics
set Schematic.1 [gui_create_window -type {Schematic}  -parent ${TopLevel.1} -defer_create_taskbar_icon]
set setting [::Misc::Setting::create -array DveSchematicSettings]
Misc::init_window $setting ${Schematic.1}
::Misc::exec_method -window ${Schematic.1} -method captionCmd
gui_add_icon_to_taskbar -window ${Schematic.1}
gui_show_window -window ${Schematic.1} -show_state maximized
gui_update_layout -id ${Schematic.1} {{show_state maximized} {dock_state undocked} {dock_on_new_line false}}
set Schematic.2 [gui_create_window -type {Schematic}  -parent ${TopLevel.1} -defer_create_taskbar_icon]
set setting [::Misc::Setting::create -array DvePathSchematicSettings]
Misc::init_window $setting ${Schematic.2}
::Misc::exec_method -window ${Schematic.2} -method captionCmd
gui_add_icon_to_taskbar -window ${Schematic.2}
gui_show_window -window ${Schematic.2} -show_state maximized
gui_update_layout -id ${Schematic.2} {{show_state maximized} {dock_state undocked} {dock_on_new_line false}}
set Source.3 Source.3
gui_update_layout -id ${Source.3} {{show_state maximized} {dock_state undocked} {dock_on_new_line false}}

# End MDI window settings


# Create and position top-level window: TopLevel.2

set TopLevel.2 TopLevel.2

# Docked window settings
gui_sync_global -id ${TopLevel.2} -option true

# MDI window settings
set Wave.1 Wave.1
gui_update_layout -id ${Wave.1} {{show_state maximized} {dock_state undocked} {dock_on_new_line false} {child_wave_left 395} {child_wave_right 965} {child_wave_colname 228} {child_wave_colvalue 162} {child_wave_col1 0} {child_wave_col2 1}}

# End MDI window settings


#</WindowLayout>

#<Database>

gui_set_precision 1s
gui_set_time_units 1s
#</Database>

# DVE Global setting session: 


# Global: Breakpoints

# Global: Bus

# Global: Expressions

# Global: Signal Time Shift

# Global: Signal Compare

# Global: Signal Groups
gui_load_child_values {ibex_test_testbench.instr_mem_intf}
gui_load_child_values {ibex_test_testbench.data_mem_intf}
gui_load_child_values {ibex_test_testbench.probe_if}


set _session_group_1 data_mem_intf
gui_sg_create "$_session_group_1"
set data_mem_intf "$_session_group_1"

gui_sg_addsignal -group "$_session_group_1" { ibex_test_testbench.data_mem_intf.data_err_i ibex_test_testbench.data_mem_intf.data_rdata_i ibex_test_testbench.data_mem_intf.data_wdata_o ibex_test_testbench.data_mem_intf.data_rvalid_i ibex_test_testbench.data_mem_intf.clk ibex_test_testbench.data_mem_intf.data_addr_o ibex_test_testbench.data_mem_intf.data_gnt_i ibex_test_testbench.data_mem_intf.data_we_o ibex_test_testbench.data_mem_intf.data_be_o ibex_test_testbench.data_mem_intf.data_req_o }

set _session_group_2 instr_mem_intf
gui_sg_create "$_session_group_2"
set instr_mem_intf "$_session_group_2"

gui_sg_addsignal -group "$_session_group_2" { ibex_test_testbench.instr_mem_intf.instr_gnt_i ibex_test_testbench.instr_mem_intf.instr_req_o ibex_test_testbench.instr_mem_intf.instr_addr_o ibex_test_testbench.instr_mem_intf.instr_rdata_i ibex_test_testbench.instr_mem_intf.instr_err_i ibex_test_testbench.instr_mem_intf.instr_rvalid_i ibex_test_testbench.instr_mem_intf.clk ibex_test_testbench.instr_mem_intf.rst_n }

set _session_group_3 probe_if
gui_sg_create "$_session_group_3"
set probe_if "$_session_group_3"

gui_sg_addsignal -group "$_session_group_3" { ibex_test_testbench.probe_if.debug_req ibex_test_testbench.probe_if.core_sleep ibex_test_testbench.probe_if.ecall ibex_test_testbench.probe_if.alert_major ibex_test_testbench.probe_if.clk ibex_test_testbench.probe_if.fetch_enable {ibex_test_testbench.probe_if.$unit} ibex_test_testbench.probe_if.alert_minor }

set _session_group_4 data_mem_intf_1
gui_sg_create "$_session_group_4"
set data_mem_intf_1 "$_session_group_4"

gui_sg_addsignal -group "$_session_group_4" { ibex_test_testbench.data_mem_intf.data_err_i ibex_test_testbench.data_mem_intf.data_rdata_i ibex_test_testbench.data_mem_intf.data_wdata_intg_o ibex_test_testbench.data_mem_intf.data_wdata_o ibex_test_testbench.data_mem_intf.data_rvalid_i ibex_test_testbench.data_mem_intf.data_rdata_intg_i ibex_test_testbench.data_mem_intf.clk ibex_test_testbench.data_mem_intf.data_addr_o ibex_test_testbench.data_mem_intf.data_gnt_i ibex_test_testbench.data_mem_intf.data_we_o ibex_test_testbench.data_mem_intf.data_be_o ibex_test_testbench.data_mem_intf.data_req_o {ibex_test_testbench.data_mem_intf.$unit} }

set _session_group_5 instr_mem_intf_1
gui_sg_create "$_session_group_5"
set instr_mem_intf_1 "$_session_group_5"

gui_sg_addsignal -group "$_session_group_5" { ibex_test_testbench.instr_mem_intf.instr_gnt_i ibex_test_testbench.instr_mem_intf.instr_req_o ibex_test_testbench.instr_mem_intf.instr_addr_o ibex_test_testbench.instr_mem_intf.instr_rdata_i ibex_test_testbench.instr_mem_intf.instr_err_i ibex_test_testbench.instr_mem_intf.instr_rvalid_i ibex_test_testbench.instr_mem_intf.clk ibex_test_testbench.instr_mem_intf.rst_n {ibex_test_testbench.instr_mem_intf.$unit} }

set _session_group_6 probe_if_1
gui_sg_create "$_session_group_6"
set probe_if_1 "$_session_group_6"

gui_sg_addsignal -group "$_session_group_6" { ibex_test_testbench.probe_if.debug_req ibex_test_testbench.probe_if.core_sleep ibex_test_testbench.probe_if.ecall ibex_test_testbench.probe_if.alert_major ibex_test_testbench.probe_if.clk ibex_test_testbench.probe_if.fetch_enable {ibex_test_testbench.probe_if.$unit} ibex_test_testbench.probe_if.alert_minor }

# Global: Highlighting

# Global: Stack
gui_change_stack_mode -mode tree

# Post database loading setting...

# Save global setting...

# Wave/List view global setting
gui_cov_show_value -switch false

# Close all empty TopLevel windows
foreach __top [gui_ekki_get_window_ids -type TopLevel] {
    if { [llength [gui_ekki_get_window_ids -parent $__top]] == 0} {
        gui_close_window -window $__top
    }
}
gui_set_loading_session_type noSession
# DVE View/pane content session: 


# Hier 'Hier.1'
gui_show_window -window ${Hier.1}
gui_list_set_filter -id ${Hier.1} -list { {Package 1} {All 0} {Process 1} {VirtPowSwitch 0} {UnnamedProcess 1} {UDP 0} {Function 1} {Block 1} {SrsnAndSpaCell 0} {OVA Unit 1} {LeafScCell 1} {LeafVlgCell 1} {Interface 1} {LeafVhdCell 1} {$unit 1} {NamedBlock 1} {Task 1} {VlgPackage 1} {ClassDef 1} {VirtIsoCell 0} }
gui_list_set_filter -id ${Hier.1} -text {*}
gui_change_design -id ${Hier.1} -design Sim
catch {gui_list_expand -id ${Hier.1} ibex_test_testbench}
catch {gui_list_select -id ${Hier.1} {ibex_test_testbench.data_mem_intf}}
gui_view_scroll -id ${Hier.1} -vertical -set 0
gui_view_scroll -id ${Hier.1} -horizontal -set 0

# Class 'Class.1'
gui_list_set_filter -id ${Class.1} -list { {OVM 1} {VMM 1} {All 1} {Object 1} {UVM 1} {RVM 1} }
gui_list_set_filter -id ${Class.1} -text {*}
gui_change_design -id ${Class.1} -design Sim
# Warning: Class view not found.

# Member 'Member.1'
gui_list_set_filter -id ${Member.1} -list { {InternalMember 0} {RandMember 1} {All 0} {BaseMember 0} {PrivateMember 1} {LibBaseMember 0} {AutomaticMember 1} {VirtualMember 1} {PublicMember 1} {ProtectedMember 1} {OverRiddenMember 0} {InterfaceClassMember 1} {StaticMember 1} }
gui_list_set_filter -id ${Member.1} -text {*}

# Data 'Data.1'
gui_list_set_filter -id ${Data.1} -list { {Buffer 1} {Input 1} {Others 1} {Linkage 1} {Output 1} {LowPower 1} {Parameter 1} {All 1} {Aggregate 1} {LibBaseMember 1} {Event 1} {Assertion 1} {Constant 1} {Interface 1} {BaseMembers 1} {Signal 1} {$unit 1} {Inout 1} {Variable 1} }
gui_list_set_filter -id ${Data.1} -text {*}
gui_view_scroll -id ${Data.1} -vertical -set 0
gui_view_scroll -id ${Data.1} -horizontal -set 0
gui_view_scroll -id ${Hier.1} -vertical -set 0
gui_view_scroll -id ${Hier.1} -horizontal -set 0

# Source 'Source.1'
gui_src_value_annotate -id ${Source.1} -switch false
gui_set_env TOGGLE::VALUEANNOTATE 0
gui_view_scroll -id ${Source.1} -vertical -set 0
gui_src_set_reusable -id ${Source.1}

# Source 'Source.2'
gui_src_value_annotate -id ${Source.2} -switch false
gui_set_env TOGGLE::VALUEANNOTATE 0
gui_open_source -id ${Source.2}  -replace -active {uvm_pkg.\uvm_root::run_test } /usr/synopsys/vcs-L-2016.06//etc/uvm-1.2/base/uvm_root.svh
gui_view_scroll -id ${Source.2} -vertical -set 3392
gui_src_set_reusable -id ${Source.2} -disable

# View 'Schematic.1'
gui_use_schematics



# View 'Schematic.2'
gui_use_schematics

# Create path schematic window 'Schematic.2'
gui_show_pin_value_annotate [gui_window_hier_name -window ${Schematic.2}]
gui_zoom -window ${Schematic.2} -rect { {-18630 -4151} {28579 14150} }



# Source 'Source.3'
gui_src_value_annotate -id ${Source.3} -switch false
gui_set_env TOGGLE::VALUEANNOTATE 0
gui_open_source -id ${Source.3}  -replace -active uvm_pkg /usr/synopsys/vcs-L-2016.06//etc/uvm-1.2/uvm_pkg.sv
gui_view_scroll -id ${Source.3} -vertical -set 336
gui_src_set_reusable -id ${Source.3} -disable

# View 'Wave.1'
gui_wv_sync -id ${Wave.1} -switch false
set groupExD [gui_get_pref_value -category Wave -key exclusiveSG]
gui_set_pref_value -category Wave -key exclusiveSG -value {false}
set origWaveHeight [gui_get_pref_value -category Wave -key waveRowHeight]
gui_list_set_height -id Wave -height 25
set origGroupCreationState [gui_list_create_group_when_add -wave]
gui_list_create_group_when_add -wave -disable
gui_wv_zoom_timerange -id ${Wave.1} 9 105
gui_list_add_group -id ${Wave.1} -after {New Group} {data_mem_intf_1}
gui_list_add_group -id ${Wave.1} -after {New Group} {instr_mem_intf_1}
gui_list_add_group -id ${Wave.1} -after {New Group} {probe_if_1}
gui_seek_criteria -id ${Wave.1} {Any Edge}



gui_set_env TOGGLE::DEFAULT_WAVE_WINDOW ${Wave.1}
gui_set_pref_value -category Wave -key exclusiveSG -value $groupExD
gui_list_set_height -id Wave -height $origWaveHeight
if {$origGroupCreationState} {
	gui_list_create_group_when_add -wave -enable
}
if { $groupExD } {
 gui_msg_report -code DVWW028
}
gui_list_set_filter -id ${Wave.1} -list { {Buffer 1} {Input 1} {Others 1} {Linkage 1} {Output 1} {Parameter 1} {All 1} {Aggregate 1} {LibBaseMember 1} {Event 1} {Assertion 1} {Constant 1} {Interface 1} {BaseMembers 1} {Signal 1} {$unit 1} {Inout 1} {Variable 1} }
gui_list_set_filter -id ${Wave.1} -text {*}
gui_list_set_insertion_bar  -id ${Wave.1} -group probe_if_1  -position in

gui_view_scroll -id ${Wave.1} -vertical -set 150
gui_show_grid -id ${Wave.1} -enable false
# Restore toplevel window zorder
# The toplevel window could be closed if it has no view/pane
if {[gui_exist_window -window ${TopLevel.1}]} {
	gui_set_active_window -window ${TopLevel.1}
	gui_set_active_window -window ${Source.3}
	gui_set_active_window -window ${HSPane.1}
}
if {[gui_exist_window -window ${TopLevel.2}]} {
	gui_set_active_window -window ${TopLevel.2}
	gui_set_active_window -window ${Wave.1}
}
#</Session>

